# Configuração global para todos os chunks
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE
)
# Datas de início e fim
dataini <- as.Date("2025-04-01")
datafim <- as.Date("2025-06-29")
library(tseries)
library(xts)
library(zoo)
plot_inicial_final <- function(serie, nome) {
datas <- index(serie)
preco <- coredata(serie)
# Ponto inicial e final
data_ini <- datas[1]
preco_ini <- preco[1]
data_fim <- datas[length(datas)]
preco_fim <- preco[length(preco)]
plot(serie, main = paste("Preço de fechamento -", nome), col = "blue")
points(data_ini, preco_ini, col = "green", pch = 19, cex = 1.5)
points(data_fim, preco_fim, col = "red", pch = 19, cex = 1.5)
# Linha ligando primeiro e último
lines(c(data_ini, data_fim), c(preco_ini, preco_fim), col = "black", lwd = 2, lty = 2)
legend("topright", legend = c("Primeiro dia", "Último dia"),
col = c("green", "red", "black"), pch = c(19, 19, NA), lty = c(NA, NA, 2), bty = "n")
}
# Aplicando para os ativos
plot_inicial_final(lwsa3, "LWSA3")
# Baixando os dados dos 5 ativos
#install.packages("tseries")
lwsa3  <- get.hist.quote("lwsa3.sa",  quote = "Close", start = dataini, end = datafim)
elet6 <- get.hist.quote("elet6.sa",  quote = "Close", start = dataini, end = datafim)
itsa4  <- get.hist.quote("itsa4.sa",  quote = "Close", start = dataini, end = datafim)
rent3  <- get.hist.quote("rent3.sa",  quote = "Close", start = dataini, end = datafim)
brfs3  <- get.hist.quote("brfs3.sa",  quote = "Close", start = dataini, end = datafim)
# Removendo valores ausentes
lwsa3 <- na.omit(lwsa3)
elet6 <- na.omit(elet6)
itsa4 <- na.omit(itsa4)
rent3 <- na.omit(rent3)
brfs3 <- na.omit(brfs3)
# Verificando quantidade de observações e visualizando os dados
length(lwsa3); plot(lwsa3, main = "Ativo - LWSA3")
length(elet6); plot(elet6, main = "Ativo - ELET6")
length(itsa4); plot(itsa4, main = "Ativo - ITSA4")
length(rent3); plot(rent3, main = "Ativo - RET3")
length(brfs3); plot(brfs3, main = "Ativo - BRFS3")
plot_inicial_final(brfs3, "BRFS3")
Correl=cbind(lwsa3, elet6, itsa4, rent3, brfs3);Correl
names(Correl)<-c("lwsa3", "elet6", "itsa4", "rent3", "brfs3"); class(Correl)
#Transformar a tabela em Data.frame para Aplicar a CORREL
Correl=cbind.data.frame(lwsa3, elet6, itsa4, rent3, brfs3);     names(Correl) <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3");Correl
attach(Correl)
class(Correl)
#Cáculo do Coeficiente de Correlação
# Pearson: Variáveis Numéricas e Paramétricas)
library(fBasics)
Corr01=correlationTest(lwsa3, elet6, method=c("pearson"));Corr01
par=mflow=c(1,1)
plot(lwsa3, elet6 , main="Correlação Xi,Xj")
abline(lm(lwsa3~elet6), col="red", lwd=3)
#Matriz de correlação (5 Ativos)
cor(Correl)
# Juntar os retornos em um data.frame
Correl <- cbind.data.frame(lwsa3, elet6, itsa4, rent3, brfs3)
names(Correl) <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
# Visualizar a classe
class(Correl)  # Deve ser "data.frame"
# --- Cálculo da correlação entre duas variáveis específicas (opcional) ---
# Pearson: Variáveis Numéricas e Paramétricas
# Instale se necessário: install.packages("fBasics")
library(fBasics)
# Teste de correlação entre duas variáveis (ex: lwsa3 e brfs3)
Corr01 <- correlationTest(Correl$lwsa3, Correl$brfs3, method = "pearson")
print(Corr01)
# --- Matriz de correlação completa ---
matriz_cor <- cor(Correl, method = "pearson")
print(matriz_cor)
# --- Visualização gráfica da correlação entre dois ativos ---
plot(Correl$brfs3, Correl$lwsa3,
main = "Correlação RENT3 x BRFS3",
xlab = "RENT3", ylab = "BRFS3",
col = "blue", pch = 16)
abline(lm(Correl$brfs3 ~ Correl$rent3), col = "red", lwd = 2)
# --- Visualização da matriz de correlação como um mapa de calor ---
# Instale se necessário: install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(matriz_cor, method = "color", addCoef.col = "black")
# Carregar pacotes necessários
library(timeSeries)
library(fPortfolio)
# ----------------------------
# 1. Definição dos ativos
# ----------------------------
ativos <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
# ----------------------------
# 2. Construção da base
# ----------------------------
Basico <- data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3,brfs3)))
names(Basico) <- ativos
# Salvar base em .txt
write.table(Basico, file = "Basico.txt")
# ----------------------------
# 3. Leitura e transformação
# ----------------------------
dados <- read.table("Basico.txt", header = TRUE)
dados <- timeSeries(dados)
# ----------------------------
# 4. Cálculo dos retornos
# ----------------------------
Retornos <- returns(dados)
# Visualizar correlação entre os ativos
cor(Retornos, use = "complete.obs")
# ----------------------------
# 5. Fronteira eficiente
# ----------------------------
fronteira <- portfolioFrontier(Retornos)
# Plotar fronteira eficiente
frontierPlot(fronteira, auto = FALSE)
# ----------------------------
# 6. Inclusão de pontos de interesse
# ----------------------------
points(0.0365, -0.0027, pch = 19, cex = 1.5, col = "green")
points(0.0203, -0.0002, pch = 19, cex = 1.5, col = "green")
points(0.0144,  0.0049, pch = 19, cex = 1.5, col = "green")
points(0.0237,  0.0074, pch = 19, cex = 1.5, col = "red")
Basico<-data.frame(na.omit(merge(lwsa3, elet6, itsa4, rent3, brfs3)));Basico
names(Basico)<-c("lwsa3", "elet6", "itsa4", "rent3", "brfs3");Basico;length(brfs3)
write.table(Basico,file="Basico.txt")
dados<-read.table("Basico.txt", head=T);dados
dados <- timeSeries(dados)
dados
Retornos<-returns(dados);Retornos
View(data.frame(Retornos))
require(fPortfolio)
fronteira<-portfolioFrontier(Retornos);fronteira
frontierPlot(fronteira, auto=F)
points(0.0365,-0.0027,pch=19, cex=1.5, col="green")
points(0.0203,-0.0002,pch=19, cex=1.5, col="green")
points(0.0144,0.0049 ,pch=19, cex=1.5, col="green")
points(0.0237,0.0074,pch=19, cex=1.5,col="red")
# Carregar pacotes necessários
library(timeSeries)
library(fPortfolio)
# ----------------------------
# 1. Definição dos ativos
# ----------------------------
ativos <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
# ----------------------------
# 2. Construção da base
# ----------------------------
Basico <- data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3,brfs3)))
names(Basico) <- ativos
# Salvar base em .txt
write.table(Basico, file = "Basico.txt")
# ----------------------------
# 3. Leitura e transformação
# ----------------------------
dados <- read.table("Basico.txt", header = TRUE)
dados <- timeSeries(dados)
# ----------------------------
# 4. Cálculo dos retornos
# ----------------------------
Retornos <- returns(dados)
# Visualizar correlação entre os ativos
cor(Retornos, use = "complete.obs")
# ----------------------------
# 5. Fronteira eficiente
# ----------------------------
fronteira <- portfolioFrontier(Retornos)
# Plotar fronteira eficiente
frontierPlot(fronteira, auto = FALSE)
# ----------------------------
# 6. Inclusão de pontos de interesse
# ----------------------------
points(0.0365, -0.0027, pch = 19, cex = 1.5, col = "green")
points(0.0203, -0.0002, pch = 19, cex = 1.5, col = "green")
points(0.0144,  0.0049, pch = 19, cex = 1.5, col = "green")
points(0.0237,  0.0074, pch = 19, cex = 1.5, col = "red")
MinimaVariancia<-minvariancePortfolio(Retornos)
PesosMinimos<-getWeights(MinimaVariancia);PesosMinimos
RetornoCalculado<-getTargetReturn(MinimaVariancia);RetornoCalculado
RiscoMinimo<-getTargetRisk(MinimaVariancia);RiscoMinimo
points(0.01183586 ,0.002906674,pch=19, cex=1.5, col="blue")
MinimaVariancia<-minvariancePortfolio(Retornos)
PesosMinimos<-getWeights(MinimaVariancia);PesosMinimos
RetornoCalculado<-getTargetReturn(MinimaVariancia);RetornoCalculado
RiscoMinimo<-getTargetRisk(MinimaVariancia);RiscoMinimo
points(0.01183586 ,0.002906674,pch=19, cex=1.5, col="blue")
# Carregar pacotes
library(timeSeries)
library(fPortfolio)
# ----------------------------
# 1. Base de dados
# ----------------------------
ativos <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
Basico <- data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3, brfs3)))
names(Basico) <- ativos
dados <- timeSeries(Basico)
# ----------------------------
# 2. Retornos
# ----------------------------
Retornos <- returns(dados)
# ----------------------------
# 3. Carteira (pesos iguais como exemplo)
# ----------------------------
pesos <- rep(1/ncol(Retornos), ncol(Retornos))
Retornos$carteira <- Retornos %*% pesos
# ----------------------------
# 4. Estatísticas
# ----------------------------
# Média dos retornos
medias <- colMeans(Retornos, na.rm = TRUE)
# Desvio padrão dos retornos
desvios <- apply(Retornos, 2, sd, na.rm = TRUE)
# Correlação entre ativos e carteira
correlacao <- cor(Retornos, use = "complete.obs")
# ----------------------------
# 5. Montar tabela consolidada
# ----------------------------
tabela <- data.frame(
Ativo = colnames(Retornos),
Media = medias,
Desvio_Padrao = desvios,
Correlacao_com_Carteira = correlacao[, "carteira"]
)
# Configuração global para todos os chunks
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE
)
# Remoção de objetos anteriores
remove(list = ls())
gc()
par(mfrow = c(1, 1))
options(scipen = 999, max.print = 100000)
date()
# Diretório de trabalho
setwd("C:/Users/Carolina/Desktop/Relatório_Maria_Carolina")
# Carregamento do pacote
library(tseries)
# Datas de início e fim
dataini <- as.Date("2025-04-01")
datafim <- as.Date("2025-06-29")
# Baixando os dados dos 5 ativos
#install.packages("tseries")
lwsa3  <- get.hist.quote("lwsa3.sa",  quote = "Close", start = dataini, end = datafim)
elet6 <- get.hist.quote("elet6.sa",  quote = "Close", start = dataini, end = datafim)
itsa4  <- get.hist.quote("itsa4.sa",  quote = "Close", start = dataini, end = datafim)
rent3  <- get.hist.quote("rent3.sa",  quote = "Close", start = dataini, end = datafim)
brfs3  <- get.hist.quote("brfs3.sa",  quote = "Close", start = dataini, end = datafim)
# Removendo valores ausentes
lwsa3 <- na.omit(lwsa3)
elet6 <- na.omit(elet6)
itsa4 <- na.omit(itsa4)
rent3 <- na.omit(rent3)
brfs3 <- na.omit(brfs3)
# Verificando quantidade de observações e visualizando os dados
length(lwsa3); plot(lwsa3, main = "Ativo - LWSA3")
length(elet6); plot(elet6, main = "Ativo - ELET6")
length(itsa4); plot(itsa4, main = "Ativo - ITSA4")
length(rent3); plot(rent3, main = "Ativo - RET3")
length(brfs3); plot(brfs3, main = "Ativo - BRFS3")
# Carregar pacotes
library(timeSeries)
library(fPortfolio)
# ----------------------------
# 1. Base de dados
# ----------------------------
ativos <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
Basico <- data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3, brfs3)))
names(Basico) <- ativos
dados <- timeSeries(Basico)
# ----------------------------
# 2. Retornos
# ----------------------------
Retornos <- returns(dados)
# ----------------------------
# 3. Carteira (pesos iguais como exemplo)
# ----------------------------
pesos <- rep(1/ncol(Retornos), ncol(Retornos))
Retornos$carteira <- Retornos %*% pesos
# ----------------------------
# 4. Estatísticas
# ----------------------------
# Média dos retornos
medias <- colMeans(Retornos, na.rm = TRUE)
# Desvio padrão dos retornos
desvios <- apply(Retornos, 2, sd, na.rm = TRUE)
# Correlação entre ativos e carteira
correlacao <- cor(Retornos, use = "complete.obs")
# ----------------------------
# 5. Montar tabela consolidada
# ----------------------------
tabela <- data.frame(
Ativo = colnames(Retornos),
Media = medias,
Desvio_Padrao = desvios,
Correlacao_com_Carteira = correlacao[, "carteira"]
)
# Lista de ativos
ativos <- c("lwsa3.sa", "elet6.sa", "itsa4.sa", "rent3.sa", "brfs3.sa")
# Criar data.frame para armazenar resultados
resultados_precos <- data.frame(
Ativo = character(),
Media = numeric(),
Desvio = numeric(),
CV = numeric(),
stringsAsFactors = FALSE
)
# Loop para baixar dados e calcular estatísticas
for (ativo in ativos) {
# Baixar dados de fechamento
preco <- get.hist.quote(ativo, quote = "Close", start = dataini, end = datafim)
# Média
m <- mean(preco)
# Desvio padrão
d <- sd(preco)
# Coeficiente de variação
cv <- d / m * 100
# Armazenar resultados
resultados_precos <- rbind(resultados_precos, data.frame(
Ativo = ativo,
Media = m,
Desvio = d,
CV = cv
))
}
# Mostrar resultados
print(resultados_precos)
# Lista de ativos
ativos <- c("lwsa3.sa", "elet6.sa", "itsa4.sa", "rent3.sa", "brfs3.sa")
# Data.frame para armazenar os resultados
resultados_retornos <- data.frame(
Ativo = character(),
Retorno_Medio = numeric(),
Desvio_Padrao = numeric(),
CV = numeric(),
stringsAsFactors = FALSE
)
# Loop pelos ativos
for (ativo in ativos) {
# Baixar os preços de fechamento
preco <- get.hist.quote(ativo, quote = "Close", start = dataini, end = datafim)
# Calcular retornos logarítmicos
retornos <- diff(log(preco))
retornos <- na.omit(retornos)
# Média dos retornos
m <- mean(retornos)
# Desvio padrão dos retornos
d <- sd(retornos)
# Coeficiente de variação (mesma fórmula que você usou)
cv <- d / (m * 100) * 100
# Armazenar resultados
resultados_retornos <- rbind(resultados_retornos, data.frame(
Ativo = ativo,
Retorno_Medio = m * 100,   # em %
Desvio_Padrao = d,
CV = cv
))
}
# Exibir resultados
print(resultados_retornos)
# Carregar pacotes
library(timeSeries)
library(fPortfolio)
# ----------------------------
# 1. Base de dados
# ----------------------------
ativos <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")
Basico <- data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3, brfs3)))
names(Basico) <- ativos
dados <- timeSeries(Basico)
# ----------------------------
# 2. Retornos
# ----------------------------
Retornos <- returns(dados)
# ----------------------------
# 3. Carteira (pesos iguais como exemplo)
# ----------------------------
pesos <- rep(1/ncol(Retornos), ncol(Retornos))
Retornos$carteira <- Retornos %*% pesos
# ----------------------------
# 4. Estatísticas
# ----------------------------
# Média dos retornos
medias <- colMeans(Retornos, na.rm = TRUE)
# Desvio padrão dos retornos
desvios <- apply(Retornos, 2, sd, na.rm = TRUE)
# Correlação entre ativos e carteira
correlacao <- cor(Retornos, use = "complete.obs")
# ----------------------------
# 5. Montar tabela consolidada
# ----------------------------
tabela <- data.frame(
Ativo = colnames(Retornos),
Media = medias,
Desvio_Padrao = desvios,
Correlacao_com_Carteira = correlacao[, "carteira"]
)
# ----------------------------
# 1. Garantir que Retornos é data.frame
# ----------------------------
Retornos_df <- as.data.frame(Retornos)
# ----------------------------
# 2. Definir pesos da carteira (exemplo: iguais)
# ----------------------------
pesos <- rep(1/ncol(Retornos_df), ncol(Retornos_df))
# Adicionar retorno da carteira
Retornos_df$carteira <- as.matrix(Retornos_df) %*% pesos
# ----------------------------
# 3. Calcular correlação
# ----------------------------
correlacao <- cor(Retornos_df, use = "complete.obs")
# ----------------------------
# 4. Usar resultados já calculados
# ----------------------------
# Renomear Ativo em resultados_retornos para bater com colnames
resultados_retornos$Ativo <- gsub(".sa", "", resultados_retornos$Ativo)
# ----------------------------
# 5. Montar tabela final
# ----------------------------
tabela <- merge(
resultados_retornos,
data.frame(
Ativo = colnames(Retornos_df),
Correlacao_com_Carteira = correlacao[, "carteira"]
),
by = "Ativo",
all = TRUE
)
# ----------------------------
# 6. Exibir tabela
# ----------------------------
print(tabela)
